// Code generated by go-bindata.
// sources:
// ConfigMap/grafana-datasources.yaml
// Deployment/admission-controllerDM.yaml
// Deployment/alameda-datahubDM.yaml
// Deployment/alameda-evictionerDM.yaml
// Deployment/alameda-grafanaDM.yaml
// Deployment/alameda-influxdbDM.yaml
// Deployment/alameda-operatorDM.yaml
// PersistentVolumeClaim/my-alamedagrafanaPVC.yaml
// PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml
// Service/admission-controllerSV.yaml
// Service/alameda-datahubSV.yaml
// Service/alameda-grafanaSV.yaml
// Service/alameda-influxdbSV.yaml
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configmapGrafanaDatasourcesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x4f\x8f\xda\x30\x10\xc5\xef\xf9\x14\x23\x9f\xf9\x53\x2e\x15\xf2\xad\x2d\x17\x0e\x55\x0f\x95\xb8\x54\x55\x35\xc4\x13\x70\x71\x6c\x6b\xc6\x61\x89\x76\xf9\xee\x2b\x67\x21\xc0\xe2\x1c\xa2\xd8\xef\xf7\x9e\x9f\x27\x18\xed\x86\x58\x6c\xf0\x1a\x8e\x8b\xea\x60\xbd\xd1\xf0\x23\xf8\xc6\xee\x7e\x62\xac\x5a\x4a\x68\x30\xa1\xae\x00\x3c\xb6\xa4\x61\xc7\xd8\xa0\xc7\x69\xde\x95\xd0\x71\x4d\x72\xd1\x24\x62\x4d\x1a\x1a\x32\xc4\x98\x02\xa3\xad\xae\xd6\xc8\xa1\xa5\xb4\xa7\x4e\x66\x3d\xb6\x4e\xc3\xdb\xb4\x02\x00\x78\x1d\xde\xf9\x51\xb7\x22\x4a\xc3\x62\x72\x13\xee\x0e\x52\x1a\xfe\x8c\xc2\xa3\x7f\xc4\x03\xef\xd6\xe6\x31\x62\xd4\x72\x4b\xa5\x41\xad\x7d\xe3\xba\xd3\xea\xbb\x9a\x7c\x46\x00\x9e\x5d\xa9\x8f\x83\xcb\x0e\x2e\xb3\x55\x85\x64\xac\x6b\x92\xdc\x4f\x45\x0e\xa7\xbe\x84\x74\xec\xb2\xbe\x4f\x29\x8a\x9e\xcf\xd1\x61\x4b\x06\xa7\xd7\xd4\xd9\xdd\xdc\x66\x72\xac\xf5\xf2\xcb\xf2\x6b\x29\x27\xa2\xc8\x4b\xe0\x7c\x47\x85\xa6\xb5\x3e\x6f\x14\x0f\x14\xe2\x11\x2a\x01\x79\xb2\x5b\x94\xe1\x72\xff\xac\x4f\xc4\x1e\x5d\x09\xdc\xa2\xd8\xfa\x5b\x97\xf6\x4a\x43\x83\x4e\xa8\xc0\x58\x59\x51\x83\x9d\x4b\x4a\x43\xe2\xae\x84\xfc\x97\xe0\x57\x98\x50\xe9\xc2\x8f\xcb\x83\x76\xf2\xfb\x60\xe3\x86\xd8\x36\xfd\x25\xe6\x89\x3b\x17\x82\x99\xd0\xfc\xf2\xae\xbf\xd6\x7b\x20\xce\xe3\xea\xef\xf0\x75\xfe\x58\xbc\x07\x00\x00\xff\xff\xc1\x67\x54\x9d\xf9\x02\x00\x00")

func configmapGrafanaDatasourcesYamlBytes() ([]byte, error) {
	return bindataRead(
		_configmapGrafanaDatasourcesYaml,
		"ConfigMap/grafana-datasources.yaml",
	)
}

func configmapGrafanaDatasourcesYaml() (*asset, error) {
	bytes, err := configmapGrafanaDatasourcesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ConfigMap/grafana-datasources.yaml", size: 761, mode: os.FileMode(420), modTime: time.Unix(1553504716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentAdmissionControllerdmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xcd\x6f\xe2\x3a\x10\xbf\xf3\x57\x8c\x7a\xe1\x94\x84\xea\x3d\xfa\xf4\x7c\x4b\x49\xaa\xad\x16\x28\x02\xb6\x52\x4f\x68\xea\x4c\x36\x56\xfd\x91\xda\x4e\x2a\xfe\xfb\x95\x0b\xb4\xc9\x96\x8f\xfa\x04\x33\x9e\xdf\xc7\x64\x3c\x58\x8b\x47\xb2\x4e\x18\xcd\x00\xeb\xda\x25\xed\xf5\xe0\x45\xe8\x82\x41\x46\xb5\x34\x5b\x45\xda\x0f\x14\x79\x2c\xd0\x23\x1b\x00\x68\x54\xc4\x00\x0b\x25\x5c\xa8\x8a\xb8\xd1\xde\x1a\x29\xc9\xee\x93\xae\x46\x4e\x0c\x4a\x2a\xc8\xa2\x37\x16\xc5\x00\x00\xb5\x36\x1e\xbd\x30\xda\x05\x10\x80\x82\x1c\xb7\xa2\xf6\xef\xc4\x19\x95\x42\x93\x83\xca\xbc\x81\x37\x50\xbc\x33\x83\xaf\xe8\x14\x0f\x80\x27\x55\x4b\xf4\x14\xa3\xac\x2b\x8c\x4d\x4d\xda\x55\xa2\xf4\xb1\x30\xc9\x1b\x0a\x1f\x95\xc6\x46\x96\xb0\xd8\x32\x18\x7a\xdb\xd0\x70\xe0\x6a\xe2\x81\xdc\x52\x2d\x05\x47\xc7\xe0\x7a\x00\xe0\x48\x12\xf7\xc6\xee\x64\x29\xf4\xbc\x9a\xe2\x33\xc9\xbd\x4e\x08\x5d\x39\xe9\xf7\xa0\x62\x5f\xdc\x69\x53\x38\x67\x5b\x15\x8e\xec\x11\x9d\xa7\x02\x38\xe8\x0f\x27\xa4\x50\x68\xb2\x1f\xd5\xd1\x65\x3a\x00\xa1\xf0\x37\x31\x78\x6d\x70\x1b\x1a\x55\x5b\x53\x57\xe4\x9d\x37\x36\x41\x89\x8a\x0a\x8c\x3e\xeb\x6d\x45\x92\xb5\xa3\xf8\x9f\xf8\xa6\x0f\xb0\x68\xa4\x5c\x18\x29\xf8\x96\xc1\x7d\x39\x37\x7e\x61\xc9\x85\x39\x39\xdc\xb2\xe4\x4c\x63\x39\x75\xac\x01\x48\xa1\x84\xef\x45\x00\x78\xdd\x30\xb8\x19\xa9\x5e\x50\x91\x32\x76\xcb\xe0\xff\xd1\x4c\x74\x12\x96\x5e\x1b\x72\x47\x11\xfe\x1d\x1f\x47\xf8\x6f\xdc\x41\x20\xdd\x7e\x96\x1e\xba\x95\x4e\xd3\x59\x9e\xa5\x9b\x34\x9b\x4d\xd6\xd3\x4d\x96\x2f\xa6\x0f\x4f\x79\xb6\x99\xa7\xb3\x7c\xb5\x48\x27\x79\x07\xb7\x45\xd9\xd0\x9d\x35\xaa\xaf\xa0\x14\x24\x8b\x25\x95\xfd\xe8\x3e\xbe\x40\x5f\xb1\x8f\xc1\x88\x3f\xde\xc7\x45\x21\xe9\x3a\xfd\xf1\xeb\x76\x93\x66\xd9\x32\x5f\xad\xfe\x56\xc1\xe0\xea\xf0\xbd\x02\x6e\xd5\x3c\xc7\x9d\xf7\x16\xbb\x96\xb3\xf1\x68\x34\x1e\x5d\x5d\xe2\xc9\xe7\xe9\xed\xf4\x8b\x49\x06\xc3\x12\xa5\xa3\xe1\xa5\xf2\xf5\x74\xb5\x99\xe4\xcb\xf5\xe6\xee\xfe\x18\x4a\x42\x9e\x27\x5e\xba\x88\x93\xf5\x2e\xfc\x8a\xb9\xf5\xdf\x01\x5d\x2c\xef\x1f\xd3\x75\xbe\xf9\x99\x3f\x7d\x1f\xfb\x85\xb6\x97\xb0\x27\xe9\x59\xbd\x2d\xda\xc4\x36\x3a\x71\xc4\x2d\x79\x97\xbc\x34\xcf\x64\x35\x79\x72\xe1\xb9\x38\xb2\xad\xe0\x84\x9c\x9b\x46\xfb\xc3\xdf\x88\x63\xcf\x55\x6b\x64\xa3\x68\x16\xae\xb8\xee\xc0\xa9\x10\xd9\xcd\x43\x5f\x7b\x47\xc7\x4e\xf3\xb1\x4c\x58\x65\x0f\x5a\x6e\x19\xbc\x7f\x99\x41\x97\xeb\xcb\x0e\xf8\x0a\xb0\x33\xd4\x1d\xd1\x5d\x64\x7e\x72\x67\x44\x5e\x1e\xca\xf7\x46\xd3\x9d\xef\xb3\x2b\xa6\x7f\xf5\x34\xfa\x9f\x00\x00\x00\xff\xff\x99\x4f\x1b\xb4\x77\x06\x00\x00")

func deploymentAdmissionControllerdmYamlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentAdmissionControllerdmYaml,
		"Deployment/admission-controllerDM.yaml",
	)
}

func deploymentAdmissionControllerdmYaml() (*asset, error) {
	bytes, err := deploymentAdmissionControllerdmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Deployment/admission-controllerDM.yaml", size: 1655, mode: os.FileMode(420), modTime: time.Unix(1553504716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentAlamedaDatahubdmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x4f\x4f\xdb\x40\x10\xc5\xef\xf9\x14\x73\xe3\x64\xc7\x51\x05\x82\xbd\x19\x39\x15\x48\x49\x88\x12\xd2\xf6\x16\x0d\xeb\x31\x5e\xb1\xff\xd8\x1d\x9b\xe6\xdb\x57\x4e\x13\x70\xda\xb8\x65\x8f\xe3\x7d\xbf\xf7\xf6\x69\x8c\x5e\x7d\xa3\x10\x95\xb3\x02\xd0\xfb\x38\x6e\x27\xa3\x17\x65\x4b\x01\x05\x79\xed\x76\x86\x2c\x8f\x0c\x31\x96\xc8\x28\x46\x00\x16\x0d\x09\x40\x8d\x86\x4a\x4c\xba\x69\xdd\x3c\x1d\xe6\xd1\xa3\x24\x01\x15\x95\x14\x90\x5d\x40\x35\x02\x40\x6b\x1d\x23\x2b\x67\x63\xa7\x07\x28\x29\xca\xa0\x3c\xef\x3d\x0b\xaa\x94\xa5\x08\xb5\x7b\x03\x76\x50\xee\x4d\x81\x6b\xea\xd2\x68\x25\xf7\xc2\x33\x76\x00\x4c\xc6\x6b\x64\x4a\x51\xfb\x1a\x53\xe7\xc9\xc6\x5a\x55\x9c\x2a\x37\x7e\x43\xc5\x49\xe5\x42\x12\x08\xcb\x9d\x80\x0b\x0e\x0d\x5d\x8c\xa2\x27\xd9\x65\x08\xb4\x47\x47\x01\x93\x11\x40\x24\x4d\x92\x5d\xf8\x9d\xce\x20\xcb\x7a\x86\x4f\xa4\x0f\x71\xa1\x4b\x72\xee\xc5\xc7\x00\x07\x5d\xaf\xa3\xee\x0c\xf5\xd4\x1d\x7d\x82\x1f\x34\x00\x38\x06\xee\x8e\x74\x96\x51\x59\x0a\xef\xc2\xe4\x9f\x26\x00\xca\xe0\x33\x09\x78\x6d\x70\xd7\x95\xe2\x83\xf3\x35\x71\x64\x17\xc6\x7f\x48\x92\x50\x93\x16\x6d\x96\x7e\x49\xaf\x4e\xe5\xcb\x46\xeb\xa5\xd3\x4a\xee\x04\xdc\x57\x0b\xc7\xcb\x40\xb1\xdb\x89\xe3\xad\x40\xd1\x35\x41\x52\xef\x39\x00\x5a\x19\xc5\x27\x13\x00\xe9\x1b\x01\x93\x2c\x33\x27\x53\x43\xc6\x85\x9d\x80\xc9\x65\x36\x57\xbd\x2f\x81\x5e\x1b\x8a\x67\x19\x97\x43\x88\xac\x8f\x20\xdb\x7e\x68\x8f\x4d\xe5\xb3\x7c\x3e\x2d\xf2\x6d\x91\x3f\xe6\x77\x9b\xdb\xed\xfd\xe2\xeb\x6c\xf3\xa3\xb8\xdd\xe6\x45\xb1\x9a\xae\xd7\x3d\x6e\x8b\xba\x21\x01\x35\xb3\x8f\x62\xfc\x5e\x98\xb2\x95\x6e\x7e\x96\x4f\x69\x6f\xc9\xd3\xd8\x4a\x71\x9d\x5d\x5f\x7d\xde\x6f\xb3\x9e\xae\x16\xf9\x7c\xfa\xb7\x21\x96\x46\xd9\xcf\x83\x96\xf9\x7a\xfd\xfd\x61\x55\x0c\x80\x3c\xc6\xf8\x5f\xd8\x72\xf5\x30\x9f\x3e\xde\x4d\x37\xeb\xed\x66\x35\x1b\xee\xc0\x07\x67\x88\x6b\x6a\x62\xf2\x72\x1d\x3f\xfe\xb8\xc4\x38\xab\xd8\x05\x65\x9f\xf7\x55\xdc\x64\x37\x93\x03\x25\x52\x68\x95\xa4\x5c\x4a\xd7\x58\x1e\x5a\xd5\xd3\x5b\x8b\x73\x4b\xfd\x2b\x00\x00\xff\xff\x1a\x2c\x95\x30\xa8\x04\x00\x00")

func deploymentAlamedaDatahubdmYamlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentAlamedaDatahubdmYaml,
		"Deployment/alameda-datahubDM.yaml",
	)
}

func deploymentAlamedaDatahubdmYaml() (*asset, error) {
	bytes, err := deploymentAlamedaDatahubdmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Deployment/alameda-datahubDM.yaml", size: 1192, mode: os.FileMode(420), modTime: time.Unix(1553504716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentAlamedaEvictionerdmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xcf\x6e\xdb\x30\x0c\xc6\xef\x7e\x0a\xa2\x97\x9e\xe2\xb8\xd8\xd2\x61\xba\xb9\xb3\x81\x05\x48\xb3\xa0\xed\x7a\x0d\x58\x99\x9e\x85\xe9\x5f\x25\xda\x45\xde\x7e\x50\x17\x6f\x36\x96\x66\xe5\x49\x90\xc8\xef\x47\x7d\x24\x7a\xf5\x48\x21\x2a\x67\x05\xa0\xf7\x71\x39\x5c\x65\x3f\x95\x6d\x04\x54\xe4\xb5\x3b\x18\xb2\x9c\x19\x62\x6c\x90\x51\x64\x00\x16\x0d\x09\x40\x8d\x86\x1a\x5c\xd0\xa0\x24\x2b\x67\x29\x1c\x9f\xa2\x47\x49\x02\x5a\x6a\x28\x20\xbb\x80\x2a\x03\x40\x6b\x1d\x63\xca\x8b\x49\x02\xa0\xa1\x28\x83\xf2\xfc\x8a\xad\xa8\x55\x96\x22\x74\xee\x05\xd8\x41\xf3\xca\x05\xee\xe8\x34\x05\x80\xc9\x78\x8d\x4c\x39\x6a\xdf\x61\xee\x3c\xd9\xd8\xa9\x96\x73\xe5\x96\x2f\xa8\x78\xd1\xba\xb0\x08\x84\xcd\x41\xc0\x25\x87\x9e\x2e\xb3\xe8\x49\x26\x74\x20\xaf\x95\xc4\x28\xe0\x2a\x03\x88\xa4\x49\xb2\x0b\xbf\x9b\x32\xc8\xb2\xdb\xe0\x13\xe9\x63\x97\x90\x1c\x79\xe3\xaf\x63\x0f\xc7\xd2\x89\x41\x29\xce\x98\x94\x42\xcf\x20\xe7\x30\x00\x63\xe7\x29\xa4\xb3\x8c\xca\x52\xf8\x53\xbb\xf8\x1f\x0a\x40\x19\xfc\x41\x02\x9e\x7b\x3c\x24\x83\x7c\x70\xbe\x23\x8e\xec\xc2\xf2\xdf\xaa\x45\xe8\x48\x8b\xa1\xc8\x3f\xe4\xd7\x73\x85\x5d\xaf\xf5\xce\x69\x25\x0f\x02\xd6\xed\xd6\xf1\x2e\x50\x4c\xcb\x31\x66\x05\x8a\xae\x0f\x92\x26\xff\x02\xd0\xca\x28\x9e\xdd\x00\x48\xdf\x0b\xb8\x2e\xcc\xec\xd2\x90\x71\xe1\x20\xe0\x73\x71\xab\x26\x0f\x81\x9e\x7b\x8a\x27\x15\x3e\xae\x4e\x2b\x7c\x5a\x4d\x14\xc8\x0e\x7f\x4b\x47\xb3\xca\x4d\x79\x5b\x57\xe5\xbe\x7e\x5c\x7f\x79\x58\x7f\xdb\xd6\x77\xfb\xaa\x7c\x28\xbf\x7e\xbf\xd9\x97\x55\x75\x57\xdf\xdf\x4f\x84\x07\xd4\x3d\x09\xb8\x18\xbd\x4a\x63\xee\xfa\xa7\x7c\xb2\xe1\x79\x1c\xa4\x58\x15\xc5\xaa\xb8\x78\x0f\x6b\x3c\xee\xeb\x6d\x79\xb3\xa9\x4f\xb0\x5a\xd4\x91\x46\xad\x48\x61\x50\x92\x4a\x29\x5d\x6f\xf9\xcc\xa8\xe7\x89\xdb\x37\xf6\xe2\x57\x00\x00\x00\xff\xff\x8f\xda\x57\x1d\xf1\x03\x00\x00")

func deploymentAlamedaEvictionerdmYamlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentAlamedaEvictionerdmYaml,
		"Deployment/alameda-evictionerDM.yaml",
	)
}

func deploymentAlamedaEvictionerdmYaml() (*asset, error) {
	bytes, err := deploymentAlamedaEvictionerdmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Deployment/alameda-evictionerDM.yaml", size: 1009, mode: os.FileMode(420), modTime: time.Unix(1553504716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentAlamedaGrafanadmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xcd\x6e\xdb\x30\x0c\xbe\xfb\x29\x78\xeb\xc9\x71\xd2\x76\x17\x5d\xd7\xcb\x80\x65\xf0\x61\xd8\x9d\x95\xe9\x58\x98\x24\x6a\x14\x9d\x22\x18\xf6\xee\x83\x12\x27\xb1\xdb\xb4\x1b\x2f\x06\x48\x7e\x3f\xa4\x68\x4c\xee\x07\x49\x76\x1c\x0d\x60\x4a\xb9\xd9\x6f\xaa\x9f\x2e\x76\x06\x9e\x28\x79\x3e\x04\x8a\x5a\x05\x52\xec\x50\xd1\x54\x00\x11\x03\x19\x40\x8f\x81\x3a\xac\x77\x82\x3d\x46\x9c\xf2\x39\xa1\x25\x03\x3d\x75\x24\xa8\x2c\xe8\x2a\x00\x8c\x91\x15\xd5\x71\xcc\x05\x0f\xd0\x51\xb6\xe2\x92\x1e\x35\x9f\xa8\x77\x91\x32\x0c\xfc\x02\xca\xd0\x1d\x45\x41\x07\x2a\x6e\xbc\xb3\x47\x20\x5c\x65\x00\x94\x42\xf2\xa8\xb4\x42\x9f\x06\x5c\x71\xa2\x98\x07\xd7\xeb\xca\x71\xf3\x82\x4e\xeb\x9e\xa5\x16\xc2\xee\x60\xe0\x4e\x65\xa4\xbb\x2a\x27\xb2\x45\x5b\xe8\x48\x99\x0d\x6c\x2a\x80\x4c\x9e\xac\xb2\x9c\x5c\x05\x54\x3b\x7c\xc5\x67\xf2\x93\xcd\x12\x98\xd2\xad\x59\xcf\x16\x26\xe4\x6c\x3b\x25\xfc\xff\x91\x00\x9c\x6d\x95\xb0\x1c\x15\x5d\x24\xb9\x00\xeb\x69\xd5\x73\x44\x09\x17\x70\x77\x4d\x37\xd3\xd7\x7c\x5a\x3d\xae\x1e\x96\x4d\xed\xe8\x7d\xcb\xde\xd9\x83\x81\x2f\xfd\x37\xd6\x56\x28\x97\xf7\x3c\x77\x25\x16\x9d\x19\x2d\x9a\x17\x1f\x2d\x8b\x1a\x78\x58\xaf\xd7\xb3\xfa\xf9\xf9\x07\xd5\xb4\x48\x27\x61\x65\xcb\xde\xc0\xf7\xcf\xed\xa5\x22\x94\x79\x14\x4b\x0b\x0d\xef\x82\x5b\xaa\x02\xd8\x34\x1a\xb8\x5f\xaf\xc3\x22\x1b\x28\xb0\x1c\x8e\x85\xad\x9b\x55\x84\x7e\x8d\x94\x6f\x72\x6c\xde\xe3\xd8\x2c\x38\xf6\xec\xc7\x40\x5b\x1e\xe3\xeb\xf9\x43\xc9\xb5\xa8\x83\x81\x66\x8f\xd2\x78\xf7\xdc\xbc\x7e\x81\xeb\x1e\xa6\x4a\x9d\xcb\xb1\xef\x68\xd1\x91\xc7\xe7\x13\xcf\x5b\xf8\x52\x86\xd4\x9e\x25\x9a\x24\xbc\x77\xe5\x6f\x74\x71\xd7\x94\xa3\x9a\x16\xf8\x81\xf6\xdb\xae\xd3\x74\xb3\xc1\xea\x7f\xda\xa5\x90\xf4\xf0\xe4\xc4\xc0\xef\x3f\x33\x98\xe5\xd8\xbb\xdd\x16\xd3\x72\xd5\x1d\xf5\x38\x7a\xdd\x72\x47\x06\x1e\xef\x6f\x5d\xc8\xfb\xee\x3e\xec\x81\xbf\x01\x00\x00\xff\xff\x34\x04\x04\x5b\x90\x04\x00\x00")

func deploymentAlamedaGrafanadmYamlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentAlamedaGrafanadmYaml,
		"Deployment/alameda-grafanaDM.yaml",
	)
}

func deploymentAlamedaGrafanadmYaml() (*asset, error) {
	bytes, err := deploymentAlamedaGrafanadmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Deployment/alameda-grafanaDM.yaml", size: 1168, mode: os.FileMode(420), modTime: time.Unix(1553580573, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentAlamedaInfluxdbdmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\x51\x4f\xdb\x30\x10\xc7\xdf\xfb\x29\x4e\xec\x81\xa7\xb6\xf4\x69\x92\xdf\x0a\x0d\x23\x1a\x94\xa8\x4d\xd9\xf6\x54\x5d\x93\x0b\xb1\x70\x6c\xcb\xbe\x14\xa2\x69\xdf\x7d\x72\x68\x21\x2d\x2d\xa0\xed\x1e\xaa\xca\xbe\xff\xef\x7f\x17\xfb\x8c\x56\xde\x91\xf3\xd2\x68\x01\x68\xad\x1f\xae\x47\xbd\x07\xa9\x73\x01\x13\xb2\xca\x34\x15\x69\xee\x55\xc4\x98\x23\xa3\xe8\x01\x68\xac\x48\x00\x2a\xac\x28\xc7\xbe\xd4\x85\xaa\x9f\xf2\xd5\x66\xc3\x5b\xcc\x48\x40\x41\x39\x39\x64\xe3\x50\xf6\x00\x50\x6b\xc3\xc8\xd2\x68\x1f\x00\x00\x39\xf9\xcc\x49\xcb\xad\xe9\x84\x0a\xa9\xc9\x43\x69\x1e\x81\x0d\xe4\xad\x2b\x70\x49\xa1\x1c\x25\xb3\x56\x08\x1d\x1f\x00\xa6\xca\x2a\x64\x1a\xa0\xb2\x25\x0e\x8c\x25\xed\x4b\x59\xf0\x40\x9a\xe1\x23\x4a\xee\x17\xc6\xf5\x1d\x61\xde\x08\x38\x65\x57\xd3\x69\xcf\x5b\xca\x82\xb9\xa3\x96\xe9\x05\x8c\x7a\x00\x9e\x14\x65\x6c\xdc\x73\x59\x15\x72\x56\x5e\xe3\x8a\xd4\xa6\xce\x10\x68\xed\xc1\x6e\xb7\x35\x6c\xa4\x9d\x0f\x14\x42\x7d\x92\x02\xb0\x2d\x2c\xc4\x17\xf0\x94\xd5\x4e\x72\x73\x61\x34\xd3\x13\xbf\x6e\x00\xb8\x5a\x8f\xfd\xc2\x93\x13\x30\x3a\x3b\x3b\xdb\xec\x64\x46\x33\x4a\x4d\xee\xc5\xac\xbf\x39\xa1\x1d\x97\x10\xb2\xc2\xfb\xce\xba\x18\x0d\xbe\xf6\x51\x59\xa9\x69\x37\x25\xa9\x95\x4a\x8c\x92\x59\x23\x20\x2e\xa6\x86\x13\x47\x3e\xdc\x82\x6d\x16\xe9\xf5\x6b\x67\x5b\xbb\x78\x7a\x79\xbd\xf8\x39\x39\x5f\xce\xa2\xe4\x76\x96\xc6\xd3\x6f\xcb\x49\x3c\x1f\x9f\x5f\x47\x93\x97\x5c\x80\x35\xaa\x9a\x04\x9c\x84\x43\x39\x39\xce\xb8\x4a\xd3\xa4\xfd\x99\x2f\xa3\xe9\xff\x33\x2e\xa2\x59\x1a\x5f\xc6\x17\xe3\x34\x3a\xc0\x19\x12\x67\x43\x56\x7e\x68\x9d\x5c\x23\x53\xf8\x3f\xc8\x1c\x7f\x8e\x9d\xcc\xe2\xbb\x71\x1a\x2d\xbf\x47\xbf\x3e\xcb\x7e\xa0\xe6\x23\xf6\x78\x91\x5e\xfd\x7b\xeb\xe3\xc9\x4d\x3c\x5d\x2e\xe6\xd1\xec\x80\x16\xf3\x4a\xea\x0f\xc5\xc9\x78\x3e\xff\x71\x3b\x3b\x64\xde\x02\x2c\x7a\xff\x0e\xe4\x88\x77\xed\xc9\x7d\xa0\x7a\xcf\x39\xc8\x77\x8d\xd7\x46\xd5\x15\xdd\x98\x5a\xb3\xef\xde\xc9\x2a\xac\x24\xc8\xa5\x80\xfd\x23\xe8\x70\x77\x9f\xb2\x30\xbf\x65\xbd\xea\xb3\xf2\x9d\x9c\xf0\x8c\xdc\x6a\xd5\x08\x28\x50\x79\x3a\xe2\xb1\x46\x37\x54\x72\x35\x7c\x33\x74\xb0\x37\x8d\x7d\x1f\x5e\xc5\xfb\x6e\x15\xbe\x5e\x3d\x53\xf6\xc4\xcf\xbd\x1d\x9d\xeb\x37\x24\xaa\x2c\x37\x13\xe9\x04\xfc\xfe\xb3\xa7\x79\xaf\x45\x4f\x99\x23\x16\xdd\x82\xda\x95\xe9\x31\xe5\xdf\x00\x00\x00\xff\xff\x99\x5d\x30\xba\x32\x06\x00\x00")

func deploymentAlamedaInfluxdbdmYamlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentAlamedaInfluxdbdmYaml,
		"Deployment/alameda-influxdbDM.yaml",
	)
}

func deploymentAlamedaInfluxdbdmYaml() (*asset, error) {
	bytes, err := deploymentAlamedaInfluxdbdmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Deployment/alameda-influxdbDM.yaml", size: 1586, mode: os.FileMode(420), modTime: time.Unix(1553580573, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentAlamedaOperatordmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcd\x6e\xdb\x30\x0c\xbe\xfb\x29\x88\x5e\x7a\x8a\xe3\x74\xeb\x0e\xba\x79\x70\x80\x0d\xe8\x4f\x90\x76\xbb\x06\xac\xcc\xcc\xc2\x24\x51\x95\x68\x17\x79\xfb\x41\x69\xbc\xd9\x43\x52\x1e\x29\x7e\x3f\xfa\x48\x0c\xe6\x27\xc5\x64\xd8\x2b\xc0\x10\xd2\x72\x58\x15\xbf\x8d\x6f\x15\x34\x14\x2c\x1f\x1c\x79\x29\x1c\x09\xb6\x28\xa8\x0a\x00\x8f\x8e\x14\xa0\x45\x47\x2d\x2e\x38\x50\x44\xe1\x78\x7a\x48\x01\x35\x29\xd8\x53\xfb\xde\x46\x53\x00\xa0\xf7\x2c\x28\x86\x7d\xca\x04\x00\x2d\x25\x1d\x4d\x90\xa3\x68\x43\x7b\xe3\x29\x41\xc7\x6f\x20\x0c\xed\x51\x15\xa4\xa3\x6c\xc7\x1a\x7d\x04\x9e\xd3\x03\x10\x72\xc1\xa2\x50\x89\x36\x74\x58\x72\x20\x9f\x3a\xb3\x97\xd2\xf0\xf2\x0d\x8d\x2c\xf6\x1c\x17\x91\xb0\x3d\x28\xb8\x96\xd8\xd3\x75\x91\x02\xe9\x6c\x22\xd2\x91\x3b\x29\x58\x15\x00\x89\x2c\x69\xe1\xf8\x6e\xcf\xa1\xe8\xee\x0e\x5f\xc8\x9e\xfc\x42\xb6\x72\xf6\xcf\xa3\x83\x13\x70\x12\x53\xae\x8b\x51\xe5\xb2\x33\x81\xcb\x12\x00\xa3\xe7\x5c\x9a\xbd\xa0\xf1\x14\xff\x22\x17\x1f\xcb\x00\x18\x87\xbf\x48\xc1\x6b\x8f\x87\x1c\x4c\x88\x1c\x3a\x92\x24\x1c\x97\xff\x63\x16\xb1\x23\xab\x86\xaa\xfc\x54\x7e\x99\xe3\x37\xbd\xb5\x1b\xb6\x46\x1f\x14\x7c\xdf\x3f\xb0\x6c\x22\xa5\x7c\x1a\xe3\x54\xa4\xc4\x7d\xd4\x34\xf9\x11\x80\x35\xce\xc8\xac\x03\xa0\x43\xaf\xe0\xa6\x72\xb3\xa6\x23\xc7\xf1\xa0\xe0\x73\x75\x6f\x26\x0f\x91\x5e\x7b\x4a\x67\x19\x56\x17\x18\x6e\xa6\x0c\xe4\x87\x7f\xd0\x31\xa8\xfa\xae\xbe\x5f\x37\xf5\xee\x71\xb3\xde\xd6\xcf\x8f\xdb\x5d\x53\x3f\xd7\xdf\x7e\x7c\xdd\xd5\x4d\xb3\x5d\x3f\x3d\x4d\x68\x07\xb4\x3d\x29\xb8\x1a\x73\xca\xcb\xed\xfa\x97\x72\x72\xdf\x65\x1a\xb4\xba\xad\xaa\xdb\xea\xea\x04\x4c\x14\x07\xa3\xa9\xd6\x9a\x7b\x2f\x17\x17\x33\x1f\x7b\x38\xbb\xc3\x3c\xf7\x27\x00\x00\xff\xff\x6a\xb9\xe8\x33\xa1\x03\x00\x00")

func deploymentAlamedaOperatordmYamlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentAlamedaOperatordmYaml,
		"Deployment/alameda-operatorDM.yaml",
	)
}

func deploymentAlamedaOperatordmYaml() (*asset, error) {
	bytes, err := deploymentAlamedaOperatordmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Deployment/alameda-operatorDM.yaml", size: 929, mode: os.FileMode(420), modTime: time.Unix(1553504716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _persistentvolumeclaimMyAlamedagrafanapvcYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\x3b\x6a\xc4\x30\x14\x45\x7b\xad\xe2\x6d\xc0\x86\xa4\x54\x9b\x22\x55\x48\x48\xe1\xa9\x2f\xd2\xb5\x11\x63\x7d\xe6\x3d\xd9\x30\xbb\x1f\x04\x9e\xf2\xdc\xcf\x41\x4b\x0b\xd5\x52\x2d\x5e\xce\x0f\x77\x4f\x25\x7a\xf9\x1b\x89\x75\x96\xbe\xd4\xfd\xc8\xfc\xda\x91\xb2\xcb\xec\x88\xe8\xf0\x4e\xa4\x20\xd3\x4b\x7e\x4e\xd8\x91\x19\x31\x6f\x8a\x15\x05\x73\x3b\xc3\x55\x5b\x43\xa0\x97\x95\x91\x8a\x5e\x15\xc9\x59\x63\x18\x6f\x84\x40\xb3\x9f\x1a\x69\x03\x45\x26\xf9\x27\xe2\x4d\x53\xe7\x6f\x09\x74\x22\x4a\xab\x87\x86\xf7\x40\xf9\x38\x68\xfd\x22\x11\x1b\xc2\x8d\x5e\x3e\xbf\x93\xbc\x02\x00\x00\xff\xff\x05\x22\x1e\x79\xc4\x00\x00\x00")

func persistentvolumeclaimMyAlamedagrafanapvcYamlBytes() ([]byte, error) {
	return bindataRead(
		_persistentvolumeclaimMyAlamedagrafanapvcYaml,
		"PersistentVolumeClaim/my-alamedagrafanaPVC.yaml",
	)
}

func persistentvolumeclaimMyAlamedagrafanapvcYaml() (*asset, error) {
	bytes, err := persistentvolumeclaimMyAlamedagrafanapvcYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "PersistentVolumeClaim/my-alamedagrafanaPVC.yaml", size: 196, mode: os.FileMode(420), modTime: time.Unix(1553504716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _persistentvolumeclaimMyAlamedainfluxdbpvcYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\xbb\x6e\xc3\x30\x0c\x45\x77\x7d\x05\x37\x4f\x36\xea\x55\x6b\x87\x4e\x45\x8b\x0e\xee\xcc\x48\xd7\x01\x11\xbd\x22\x4a\x46\xf2\xf7\x81\x00\x67\x3c\xf7\x71\xb8\xc8\x86\xaa\x92\x93\xa5\x63\x35\x37\x49\xde\xd2\xef\x48\xb4\x21\xb5\x2d\x87\x1e\xf1\x19\x58\xa2\x89\x68\xec\xb9\xb1\x35\x44\x89\x23\x2c\xc5\xe7\xcc\x81\x23\x3c\x2f\x92\xf6\xd0\x1f\xfe\xb2\x94\xc3\x9d\xbd\x16\x76\xb0\xb4\xc3\xa3\x72\xcb\x95\xc5\x68\x81\x1b\x77\x76\x0e\xaa\xdf\xd9\x43\x07\x12\xcd\xf4\x07\xf6\xff\x55\x1a\x7e\x92\x83\x21\xaa\xd0\xdc\xab\x7b\x0f\x2a\xee\x1d\xda\x4e\x22\xd2\x21\xbc\xc2\xd2\xb4\x7e\x7c\xc9\xf4\x0a\x00\x00\xff\xff\x1f\xa2\x03\x61\xc7\x00\x00\x00")

func persistentvolumeclaimMyAlamedainfluxdbpvcYamlBytes() ([]byte, error) {
	return bindataRead(
		_persistentvolumeclaimMyAlamedainfluxdbpvcYaml,
		"PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml",
	)
}

func persistentvolumeclaimMyAlamedainfluxdbpvcYaml() (*asset, error) {
	bytes, err := persistentvolumeclaimMyAlamedainfluxdbpvcYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml", size: 199, mode: os.FileMode(420), modTime: time.Unix(1553504716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _serviceAdmissionControllersvYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x41\x4e\xc4\x30\x0c\x45\xf7\x39\x85\x2f\x90\x52\xc4\x2c\x50\x4e\x81\x84\xc4\xde\xa4\x7f\x66\x22\x52\x3b\xb2\xad\x39\x3f\x6a\xe8\x12\xc4\x2e\xf1\xff\x7a\xcf\xe6\xd1\x3e\x60\xde\x54\x0a\x3d\x9e\xd3\x57\x93\xad\xd0\x3b\xec\xd1\x2a\xd2\x8e\xe0\x8d\x83\x4b\x22\x62\x11\x0d\x8e\xa6\xe2\xc7\x97\xc8\x7f\x4a\x0b\xf7\x71\xe7\x45\x07\xc4\xef\xed\x1a\x4b\xd3\xa7\x19\xc9\x2d\x57\x58\x64\x47\x35\x44\x16\xde\x51\x88\xb7\xbd\xf9\x61\xcb\x55\x25\x4c\x7b\x87\xe5\xe8\x9e\x88\x3a\x7f\xa2\x9f\x6c\x1e\xe3\xf7\x6e\x22\xfa\x1b\x74\x86\x3e\xb8\xa2\xd0\x15\x1b\x8c\x43\x8d\x5b\xf2\x81\x7a\x90\x87\x5a\x4c\x45\x9e\xcf\x42\x97\xcb\xcb\x14\x06\xdb\x0d\xf1\x36\x67\xaf\xeb\xba\xa6\xe3\xbe\x8e\x1a\x6a\xff\x6c\xf4\x1d\x00\x00\xff\xff\xd7\x20\x8b\xad\x41\x01\x00\x00")

func serviceAdmissionControllersvYamlBytes() ([]byte, error) {
	return bindataRead(
		_serviceAdmissionControllersvYaml,
		"Service/admission-controllerSV.yaml",
	)
}

func serviceAdmissionControllersvYaml() (*asset, error) {
	bytes, err := serviceAdmissionControllersvYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Service/admission-controllerSV.yaml", size: 321, mode: os.FileMode(420), modTime: time.Unix(1553504716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _serviceAlamedaDatahubsvYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x31\x0e\xc3\x20\x14\x43\x77\x4e\xe1\x0b\x44\x4a\x87\x2c\x5c\xa3\x52\x77\x07\xdc\x16\x95\x04\xf4\xa1\x39\x7f\x45\xd4\x35\x9b\x65\x5b\xcf\x66\x4d\x0f\x59\x4b\x65\xf7\x38\x6e\xee\x93\xf6\xe8\x71\x97\x1d\x29\xc8\x6d\xea\x8c\xec\xf4\x0e\xc8\x5c\x95\xdb\x50\x00\x6b\xf5\x60\xe6\xa6\xc8\x69\x14\xde\xdf\xd5\x01\x3b\x37\x5d\xf9\xad\x32\xc8\xe3\xa9\x28\x63\x2f\xc6\xe4\x5a\x55\x18\xbc\x5a\xac\x9f\xe0\xe9\x4f\x78\x59\x0d\xe7\xce\x48\x3c\x96\x79\x5e\x66\x07\x34\x65\x85\x5e\xec\xfa\xc3\x2f\x00\x00\xff\xff\x17\x03\xde\x3c\xcd\x00\x00\x00")

func serviceAlamedaDatahubsvYamlBytes() ([]byte, error) {
	return bindataRead(
		_serviceAlamedaDatahubsvYaml,
		"Service/alameda-datahubSV.yaml",
	)
}

func serviceAlamedaDatahubsvYaml() (*asset, error) {
	bytes, err := serviceAlamedaDatahubsvYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Service/alameda-datahubSV.yaml", size: 205, mode: os.FileMode(420), modTime: time.Unix(1553504716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _serviceAlamedaGrafanasvYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x31\xaa\xc3\x30\x10\x44\x7b\x9d\x62\x2f\x60\xf0\xe7\x77\x3a\x45\x20\x90\x7e\x22\x8d\x8d\x88\x2c\x2d\xab\xc5\xe7\x0f\x56\x95\xc6\xdd\xe3\x15\x6f\x06\x5a\x5e\xb4\x51\x7a\x8b\x72\xfe\x85\x4f\x69\x39\xca\x93\x76\x96\xc4\x70\xd0\x91\xe1\x88\x41\xa4\xe2\xcd\x3a\x2e\x12\x81\x6a\x14\x54\x1c\xcc\x58\x76\xc3\x86\x86\x20\xd2\x70\xf0\xce\x0f\x45\x62\x94\x8d\x99\x06\xef\x86\x12\x86\x32\x5d\x3d\xed\xe6\x33\xbc\x4c\x8c\xf2\xbf\xae\xeb\xdc\x71\xd8\x4e\x7f\xfc\xca\xc1\xca\xe4\xdd\xee\x8f\xc8\x37\x00\x00\xff\xff\x1d\x9d\x3e\xc2\xd3\x00\x00\x00")

func serviceAlamedaGrafanasvYamlBytes() ([]byte, error) {
	return bindataRead(
		_serviceAlamedaGrafanasvYaml,
		"Service/alameda-grafanaSV.yaml",
	)
}

func serviceAlamedaGrafanasvYaml() (*asset, error) {
	bytes, err := serviceAlamedaGrafanasvYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Service/alameda-grafanaSV.yaml", size: 211, mode: os.FileMode(420), modTime: time.Unix(1553504716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _serviceAlamedaInfluxdbsvYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x4d\x4e\xc4\x30\x0c\x85\xf7\x39\x85\x2f\x90\x02\x1b\x34\xca\x29\x90\x90\xd8\xbf\x26\xaf\xd3\x88\x34\x89\x62\x4f\xc5\xf1\x51\x0b\x12\x3f\x8b\xd9\xd9\x7e\x9f\x3f\x1b\x3d\xbf\x71\x68\x6e\x35\xc8\xfe\xe4\xde\x73\x4d\x41\x5e\x39\xf6\x1c\xe9\x36\x1a\x12\x0c\xc1\x89\xa0\xd6\x66\xb0\xdc\xaa\x1e\xad\x88\x7e\x41\x13\x4a\x5f\x31\xb5\xce\xaa\x6b\x5e\x6c\xca\xed\xe1\x8c\xea\xd5\x47\x0e\xf3\xca\x38\x68\xbe\x62\x63\x10\x14\x6c\x4c\xf0\x87\x75\xbd\xcd\xde\x8a\x3a\x91\x82\x99\xe5\x5b\x8b\xde\x7f\xb0\x5c\x97\x72\xfb\x48\xb3\x13\xf9\xbb\xff\x2f\xd0\x8e\xc8\x20\x0b\x13\x07\xac\x0d\x64\xa7\x9d\xf1\x30\xf6\x36\xec\x54\xfb\xb3\x0c\x72\x79\xbc\x3c\x9f\x97\x0c\xe3\x4a\x7b\xf9\x3d\x54\x16\x46\x6b\xe3\xce\x2b\x9f\x01\x00\x00\xff\xff\x72\x16\x4d\x33\x31\x01\x00\x00")

func serviceAlamedaInfluxdbsvYamlBytes() ([]byte, error) {
	return bindataRead(
		_serviceAlamedaInfluxdbsvYaml,
		"Service/alameda-influxdbSV.yaml",
	)
}

func serviceAlamedaInfluxdbsvYaml() (*asset, error) {
	bytes, err := serviceAlamedaInfluxdbsvYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Service/alameda-influxdbSV.yaml", size: 305, mode: os.FileMode(420), modTime: time.Unix(1553504716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ConfigMap/grafana-datasources.yaml":               configmapGrafanaDatasourcesYaml,
	"Deployment/admission-controllerDM.yaml":           deploymentAdmissionControllerdmYaml,
	"Deployment/alameda-datahubDM.yaml":                deploymentAlamedaDatahubdmYaml,
	"Deployment/alameda-evictionerDM.yaml":             deploymentAlamedaEvictionerdmYaml,
	"Deployment/alameda-grafanaDM.yaml":                deploymentAlamedaGrafanadmYaml,
	"Deployment/alameda-influxdbDM.yaml":               deploymentAlamedaInfluxdbdmYaml,
	"Deployment/alameda-operatorDM.yaml":               deploymentAlamedaOperatordmYaml,
	"PersistentVolumeClaim/my-alamedagrafanaPVC.yaml":  persistentvolumeclaimMyAlamedagrafanapvcYaml,
	"PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml": persistentvolumeclaimMyAlamedainfluxdbpvcYaml,
	"Service/admission-controllerSV.yaml":              serviceAdmissionControllersvYaml,
	"Service/alameda-datahubSV.yaml":                   serviceAlamedaDatahubsvYaml,
	"Service/alameda-grafanaSV.yaml":                   serviceAlamedaGrafanasvYaml,
	"Service/alameda-influxdbSV.yaml":                  serviceAlamedaInfluxdbsvYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ConfigMap": {nil, map[string]*bintree{
		"grafana-datasources.yaml": {configmapGrafanaDatasourcesYaml, map[string]*bintree{}},
	}},
	"Deployment": {nil, map[string]*bintree{
		"admission-controllerDM.yaml": {deploymentAdmissionControllerdmYaml, map[string]*bintree{}},
		"alameda-datahubDM.yaml":      {deploymentAlamedaDatahubdmYaml, map[string]*bintree{}},
		"alameda-evictionerDM.yaml":   {deploymentAlamedaEvictionerdmYaml, map[string]*bintree{}},
		"alameda-grafanaDM.yaml":      {deploymentAlamedaGrafanadmYaml, map[string]*bintree{}},
		"alameda-influxdbDM.yaml":     {deploymentAlamedaInfluxdbdmYaml, map[string]*bintree{}},
		"alameda-operatorDM.yaml":     {deploymentAlamedaOperatordmYaml, map[string]*bintree{}},
	}},
	"PersistentVolumeClaim": {nil, map[string]*bintree{
		"my-alamedagrafanaPVC.yaml":  {persistentvolumeclaimMyAlamedagrafanapvcYaml, map[string]*bintree{}},
		"my-alamedainfluxdbPVC.yaml": {persistentvolumeclaimMyAlamedainfluxdbpvcYaml, map[string]*bintree{}},
	}},
	"Service": {nil, map[string]*bintree{
		"admission-controllerSV.yaml": {serviceAdmissionControllersvYaml, map[string]*bintree{}},
		"alameda-datahubSV.yaml":      {serviceAlamedaDatahubsvYaml, map[string]*bintree{}},
		"alameda-grafanaSV.yaml":      {serviceAlamedaGrafanasvYaml, map[string]*bintree{}},
		"alameda-influxdbSV.yaml":     {serviceAlamedaInfluxdbsvYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
