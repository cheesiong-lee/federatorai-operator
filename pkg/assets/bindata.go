// Code generated by go-bindata.
// sources:
// ConfigMap/grafana-datasources.yaml
// Deployment/admission-controllerDM.yaml
// Deployment/alameda-aiDM.yaml
// Deployment/alameda-datahubDM.yaml
// Deployment/alameda-evictionerDM.yaml
// Deployment/alameda-grafanaDM.yaml
// Deployment/alameda-influxdbDM.yaml
// Deployment/alameda-operatorDM.yaml
// PersistentVolumeClaim/my-alamedagrafanaPVC.yaml
// PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml
// Service/admission-controllerSV.yaml
// Service/alameda-datahubSV.yaml
// Service/alameda-grafanaSV.yaml
// Service/alameda-influxdbSV.yaml
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configmapGrafanaDatasourcesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x4f\x8f\xda\x30\x10\xc5\xef\xf9\x14\x23\x9f\xf9\x53\x2e\x15\xf2\xad\x2d\x17\x0e\x55\x0f\x95\xb8\x54\x55\x35\xc4\x13\x70\x71\x6c\x6b\xc6\x61\x89\x76\xf9\xee\x2b\x67\x21\xc0\xe2\x1c\xa2\xd8\xef\xf7\x9e\x9f\x27\x18\xed\x86\x58\x6c\xf0\x1a\x8e\x8b\xea\x60\xbd\xd1\xf0\x23\xf8\xc6\xee\x7e\x62\xac\x5a\x4a\x68\x30\xa1\xae\x00\x3c\xb6\xa4\x61\xc7\xd8\xa0\xc7\x69\xde\x95\xd0\x71\x4d\x72\xd1\x24\x62\x4d\x1a\x1a\x32\xc4\x98\x02\xa3\xad\xae\xd6\xc8\xa1\xa5\xb4\xa7\x4e\x66\x3d\xb6\x4e\xc3\xdb\xb4\x02\x00\x78\x1d\xde\xf9\x51\xb7\x22\x4a\xc3\x62\x72\x13\xee\x0e\x52\x1a\xfe\x8c\xc2\xa3\x7f\xc4\x03\xef\xd6\xe6\x31\x62\xd4\x72\x4b\xa5\x41\xad\x7d\xe3\xba\xd3\xea\xbb\x9a\x7c\x46\x00\x9e\x5d\xa9\x8f\x83\xcb\x0e\x2e\xb3\x55\x85\x64\xac\x6b\x92\xdc\x4f\x45\x0e\xa7\xbe\x84\x74\xec\xb2\xbe\x4f\x29\x8a\x9e\xcf\xd1\x61\x4b\x06\xa7\xd7\xd4\xd9\xdd\xdc\x66\x72\xac\xf5\xf2\xcb\xf2\x6b\x29\x27\xa2\xc8\x4b\xe0\x7c\x47\x85\xa6\xb5\x3e\x6f\x14\x0f\x14\xe2\x11\x2a\x01\x79\xb2\x5b\x94\xe1\x72\xff\xac\x4f\xc4\x1e\x5d\x09\xdc\xa2\xd8\xfa\x5b\x97\xf6\x4a\x43\x83\x4e\xa8\xc0\x58\x59\x51\x83\x9d\x4b\x4a\x43\xe2\xae\x84\xfc\x97\xe0\x57\x98\x50\xe9\xc2\x8f\xcb\x83\x76\xf2\xfb\x60\xe3\x86\xd8\x36\xfd\x25\xe6\x89\x3b\x17\x82\x99\xd0\xfc\xf2\xae\xbf\xd6\x7b\x20\xce\xe3\xea\xef\xf0\x75\xfe\x58\xbc\x07\x00\x00\xff\xff\xc1\x67\x54\x9d\xf9\x02\x00\x00")

func configmapGrafanaDatasourcesYamlBytes() ([]byte, error) {
	return bindataRead(
		_configmapGrafanaDatasourcesYaml,
		"ConfigMap/grafana-datasources.yaml",
	)
}

func configmapGrafanaDatasourcesYaml() (*asset, error) {
	bytes, err := configmapGrafanaDatasourcesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ConfigMap/grafana-datasources.yaml", size: 761, mode: os.FileMode(420), modTime: time.Unix(1553504716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentAdmissionControllerdmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x8f\xdb\x36\x10\xbd\xfb\x57\x0c\x72\xd9\x93\x24\x07\xed\xa6\x28\x6f\x8a\xa5\xa0\x8b\xda\x8e\x61\xbb\x01\x72\x32\x66\xa9\x51\x45\x2c\x3f\x14\x72\xa4\xc0\xff\xbe\x90\x65\x6d\xa4\xae\x3f\x96\x27\x69\xc8\xf7\xe6\xbd\xe1\x70\xb0\x56\xdf\xc8\x07\xe5\xac\x00\xac\xeb\x90\xb4\x1f\x67\x2f\xca\x16\x02\x32\xaa\xb5\x3b\x1a\xb2\x3c\x33\xc4\x58\x20\xa3\x98\x01\x58\x34\x24\x00\x0b\xa3\x42\x87\x8a\xa4\xb3\xec\x9d\xd6\xe4\xcf\x9b\xa1\x46\x49\x02\x4a\x2a\xc8\x23\x3b\x8f\x6a\x06\xa0\xf1\x99\x74\x07\x87\x2e\x8b\x00\xd4\x68\xa8\xc0\x53\x40\x3a\x53\x3b\x4b\x96\xaf\xd2\xa2\xb5\x8e\x91\x95\xb3\xa1\xe7\x28\x28\x48\xaf\x6a\x3e\xc9\xce\xa8\x54\x96\x02\x54\xee\x27\xb0\x83\xe2\xa4\x1b\xb8\xa2\x6b\x74\x00\x4c\xa6\xd6\xc8\x14\xa3\xae\x2b\x8c\x5d\x4d\x36\x54\xaa\xe4\x58\xb9\xe4\x27\x2a\x8e\x4a\xe7\x23\x4f\x58\x1c\x05\x3c\xb0\x6f\xe8\x61\x16\x6a\x92\x5d\x72\x4f\xb5\x56\x12\x83\x80\x8f\x33\x80\x40\x9a\x24\x3b\xdf\xcb\x32\xc8\xb2\x5a\x76\x56\xcf\x3a\x07\xb7\x97\x75\x0c\x2a\xce\xe0\x51\x91\xbb\x75\xb3\xd0\xdd\xd2\x93\x44\xb7\x53\x01\x0c\xfa\xfb\x8a\x5b\x46\x65\xc9\xbf\xa2\xa3\xfb\xe9\x00\x94\xc1\x7f\x49\xc0\x8f\x06\x8f\x5d\xa1\x6a\xef\xea\x8a\x38\xb0\xf3\xc9\xf9\x3e\xa3\x5f\x78\x5f\x91\x16\xed\x3c\xfe\x2d\xfe\x34\x25\xd8\x34\x5a\x6f\x9c\x56\xf2\x28\xe0\xa9\x5c\x3b\xde\x78\x0a\x5d\x97\x0d\xa7\x3c\x05\xd7\x78\x49\x23\x6b\x00\x5a\x19\xc5\x93\x08\x80\xac\x1b\x01\x9f\xe6\x66\x12\x34\x64\x9c\x3f\x0a\xf8\x73\xbe\x52\xa3\x0d\x4f\x3f\x1a\x0a\x17\x19\x7e\x7f\xbc\xcc\xf0\xc7\xe3\x88\x81\x6c\xfb\x0b\x3a\x54\x2b\x5d\xa6\xab\x3c\x4b\x0f\x69\xb6\x5a\xec\x97\x87\x2c\xdf\x2c\xbf\x7e\xcf\xb3\xc3\x3a\x5d\xe5\xbb\x4d\xba\xc8\x47\xbc\x2d\xea\x86\xbe\x78\x67\xa6\x0a\x4a\x45\xba\xd8\x52\x39\x8d\x9e\xe3\x1b\xe4\x4a\xbc\x36\x46\xfc\xfa\xba\xee\x0a\x49\xf7\xe9\x5f\xff\x7c\x3e\xa4\x59\xb6\xcd\x77\xbb\xff\xab\x10\xf0\x61\xb8\xaf\x8e\xb7\x6a\x9e\xe3\xd1\x6b\x8d\x43\x2b\xc5\xe3\x7c\xfe\x38\xff\x70\x2f\x4f\xbe\x4e\x3f\x2f\xdf\x98\x14\xf0\x50\xa2\x0e\xf4\x70\x0f\xbe\x5f\xee\x0e\x8b\x7c\xbb\x3f\x7c\x79\xba\xc4\x92\x10\xcb\x84\x75\x88\x24\x79\x0e\xdd\x57\x2c\x3d\xbf\x87\x74\xb3\x7d\xfa\x96\xee\xf3\xc3\xdf\xf9\xf7\xf7\x73\xbf\xd0\xf1\x1e\xf7\x22\xbd\xa9\xb7\x45\x9f\xf8\xc6\x26\x81\xa4\x27\x0e\xc9\x4b\xf3\x4c\xde\x12\x53\xe8\x9e\x4b\x20\xdf\x2a\x49\x28\xa5\x6b\x2c\x0f\xbf\x91\xc4\x89\xab\xd6\xe9\xc6\xd0\xaa\x3b\x12\xc6\x0d\x67\xba\x48\xdf\x0f\x53\xed\x23\x1d\xbd\xe6\x4b\x3b\xdd\x28\xfb\x6a\xf5\x51\xc0\xe9\x66\x66\xe3\x5c\x6f\x66\xc0\x5b\x82\xde\xd0\xb8\x45\xfb\xc8\xfa\xea\xcc\x88\x58\x0f\xf0\xb3\xd1\xb4\xf7\x7d\x73\xc4\x4c\x8f\x5e\x67\xff\x2f\x00\x00\xff\xff\xb5\xe8\xa2\x09\xb5\x06\x00\x00")

func deploymentAdmissionControllerdmYamlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentAdmissionControllerdmYaml,
		"Deployment/admission-controllerDM.yaml",
	)
}

func deploymentAdmissionControllerdmYaml() (*asset, error) {
	bytes, err := deploymentAdmissionControllerdmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Deployment/admission-controllerDM.yaml", size: 1717, mode: os.FileMode(420), modTime: time.Unix(1553755533, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentAlamedaAidmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xc1\x6e\xdb\x3c\x10\x84\xef\x7e\x8a\x45\xee\xb6\x95\xfc\xc9\x7f\xe0\xcd\xad\x02\xb4\x40\x93\x08\x49\xda\x6b\xb1\xa1\x36\x16\x51\x92\xcb\x90\x2b\x15\x46\xd1\x77\x2f\x28\x39\x8a\x64\xbb\x48\x79\x1c\x72\xbe\x1d\x8f\x57\x18\xcc\x37\x8a\xc9\xb0\x57\x80\x21\xa4\x75\x77\xbe\xf8\x61\x7c\xad\xa0\xa4\x60\x79\xe7\xc8\xcb\xc2\x91\x60\x8d\x82\x6a\x01\xe0\xd1\x91\x02\xb4\xe8\xa8\xc6\x25\x9a\xbd\x94\x02\x6a\x52\xf0\x4c\x35\x45\x14\x8e\xfd\x85\xc5\x27\xb2\xd9\x04\x99\x3d\xba\x7a\x41\xb3\x0b\xec\xc9\xcb\x01\x0c\xbd\x67\x41\x31\xec\xd3\xe0\xac\x29\xe9\x68\x82\xf4\x11\x4b\x7a\x36\x9e\x12\x34\xfc\x13\x84\xa1\xee\x33\x82\x34\x94\x07\x58\xa3\x7b\xe3\x08\xe4\x30\x84\x59\xa4\x40\x3a\xd3\x22\xf5\x8f\x92\x82\xf3\x05\x40\x22\x4b\x5a\x38\x0e\x73\x1c\x8a\x6e\xbe\xe4\xc4\xfb\xc1\xf3\xd0\x43\x3a\x21\x17\x2c\x0a\xed\x2d\x93\x5e\xf2\x39\xd1\x4d\x3e\x76\x06\x3d\x85\x05\x78\x4d\x38\x54\xe3\x05\x8d\xa7\x38\x7a\x96\x47\xe8\x25\xf9\xad\xf1\x34\x32\x8d\xc3\x2d\x29\x78\x69\x71\xb7\x32\xbc\x0e\x91\x43\x43\x92\x84\xe3\xfa\xcd\xa4\xba\x62\xf5\xdf\xea\xff\xb9\xa9\x6a\xad\xad\xd8\x1a\xbd\x53\xf0\xf9\xf9\x96\xa5\x8a\x94\xf2\xbf\xfe\xfa\x2a\x70\x94\x49\xfa\xe5\x5b\xbe\x8a\xa3\x28\xb8\x2a\x8a\xab\xf3\xf1\x1a\x20\x44\x16\xd6\x6c\x15\x3c\x7e\xac\x46\x3d\x52\xe2\x36\x6a\x9a\x90\x00\xac\x71\x46\x66\x0a\x80\x0e\xad\x82\xcb\xa2\x28\xdc\x4c\x76\xe4\x38\xee\x14\x5c\x5e\x15\x37\x66\x72\x13\xe9\xa5\xa5\x74\x12\x72\xf1\x57\xc8\xc5\x0c\x42\xbe\x9b\xfe\xbc\xa1\xea\xbb\xea\xfa\x7e\xf3\x78\x77\xff\x7d\x53\x96\xf7\xd7\x0f\x0f\x13\x4e\x87\xb6\x25\x05\x67\x87\x6b\xb6\x9a\x6c\xff\x2a\x75\x5a\xe5\x66\x8a\xb3\x23\x74\xb9\x79\xdc\x7c\xfa\xfa\xe1\x1f\xc8\x79\xb9\x9a\xf6\xe9\x3d\x70\xc7\xb6\x75\x74\xc3\xad\x9f\xf7\xb0\x04\x97\xb5\x0a\xa5\x51\xb0\xee\x30\xae\x2d\x6f\x67\x85\x1c\xad\x95\xe5\xed\x32\x6f\x0d\x6e\x69\xf6\x30\xb5\x4f\x03\xe6\x68\xbb\x87\xe1\xe9\xb8\xc1\x77\xa9\xe4\x82\xec\x4a\x13\x15\xfc\xfa\xbd\x97\x13\xc5\xce\x68\xda\x68\x9d\x83\x9f\x98\x36\x7f\x70\x7b\xf8\xc1\xfd\x09\x00\x00\xff\xff\x79\x25\xeb\x87\xcf\x04\x00\x00")

func deploymentAlamedaAidmYamlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentAlamedaAidmYaml,
		"Deployment/alameda-aiDM.yaml",
	)
}

func deploymentAlamedaAidmYaml() (*asset, error) {
	bytes, err := deploymentAlamedaAidmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Deployment/alameda-aiDM.yaml", size: 1231, mode: os.FileMode(420), modTime: time.Unix(1553756524, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentAlamedaDatahubdmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\x4f\x6f\xe2\x30\x10\xc5\xef\x7c\x8a\xb9\xf5\x94\x10\xb4\x6a\xd5\xfa\x96\x2a\xac\x5a\x09\x28\x82\xb2\xbb\x37\x34\x75\x86\xc6\xaa\xff\xd5\x9e\xa4\xcb\xb7\x5f\x25\x05\x1a\xb6\xb0\x5b\x1f\x27\x7e\xbf\xf7\xfc\x64\x07\xbd\xfa\x41\x21\x2a\x67\x05\xa0\xf7\x71\xd8\x8c\x06\x2f\xca\x96\x02\x0a\xf2\xda\x6d\x0d\x59\x1e\x18\x62\x2c\x91\x51\x0c\x00\x2c\x1a\x12\x80\x1a\x0d\x95\x98\xb4\xd3\xaa\x7e\xda\xcd\xa3\x47\x49\x02\x36\x54\x52\x40\x76\x01\xd5\x00\x40\xe3\x13\xe9\x56\x09\xad\xc1\x41\xda\x0d\xa4\x33\xde\x59\xb2\x7c\x8a\x88\xd6\x3a\x46\x56\xce\xc6\x77\x79\x49\x51\x06\xe5\xb9\x0b\x5b\xd0\x46\x59\x8a\x50\xb9\x37\x60\x07\x65\x97\x16\xb8\xa2\xd6\x45\x2b\xd9\x09\x4f\x50\x01\x98\x8c\xd7\xc8\x94\xa2\xf6\x15\xa6\xce\x93\x8d\x95\xda\x70\xaa\xdc\xf0\x0d\x15\x27\x1b\x17\x92\x40\x58\x6e\x05\x5c\x70\xa8\xe9\x62\x10\x3d\xc9\x36\x43\xa0\x0e\x1d\x05\x8c\x06\x00\x91\x34\x49\x76\xe1\x3d\x9d\x41\x96\xd5\xa4\x3d\xec\x2e\xee\xf1\x79\x7b\x11\xf6\x01\x76\xba\x5e\xb9\xed\x3a\x57\x70\xbb\xf4\x11\xfe\xac\x01\xc0\x3e\xf0\x7b\xc9\x96\x51\x59\x0a\x07\x61\xf2\x4f\x13\x00\x65\xf0\x99\x04\xbc\xd6\xb8\x6d\x4b\xf1\xc1\xf9\x8a\x38\xb2\x0b\xc3\xbf\x24\x49\xa8\x48\x8b\x26\x4b\xbf\xa5\x57\xc7\xf2\x79\xad\xf5\xdc\x69\x25\xb7\x02\xee\x37\x33\xc7\xf3\x40\xb1\xbd\x4c\xfb\x5d\x81\xa2\xab\x83\xa4\xde\x71\x00\xb4\x32\x8a\x8f\x26\x00\xd2\xd7\x02\x46\x59\x66\x8e\xa6\x86\x8c\x0b\x5b\x01\xa3\xcb\x6c\xaa\x7a\x5f\x02\xbd\xd6\x14\x4f\x32\x2e\xcf\x21\xb2\x3e\x82\x6c\xf3\xa1\xdd\x37\x95\x4f\xf2\xe9\xb8\xc8\xd7\x45\xfe\x98\xdf\xad\x6e\xd7\xf7\xb3\xef\x93\xd5\xaf\xe2\x76\x9d\x17\xc5\x62\xbc\x5c\xf6\xb8\x0d\xea\x9a\x04\x54\xcc\x3e\x8a\xe1\xa1\x30\x65\x37\xba\xfe\x5d\x3e\xa5\xbd\xd7\x91\xc6\x46\x8a\xeb\xec\xfa\xea\xeb\x7e\xab\xe5\x78\x31\xcb\xa7\xe3\xcf\x86\x58\x1a\x65\xbf\x0e\x9a\xe7\xcb\xe5\xcf\x87\x45\x71\x06\xe4\x31\xc6\xff\xc2\xe6\x8b\x87\xe9\xf8\xf1\x6e\xbc\x5a\xae\x57\x8b\xc9\xf9\x0e\x7c\x70\x86\xb8\xa2\x3a\x26\x2f\xd7\xf1\xe3\xc5\x25\xc6\x59\xc5\x2e\x28\xfb\xdc\x55\x71\x93\xdd\x8c\x76\x94\x48\xa1\x51\x92\x72\x29\x5d\x7d\xfa\xf7\xf0\x79\xd7\xec\xd4\xa5\xfe\x13\x00\x00\xff\xff\xb0\x74\x2b\xb7\xe1\x04\x00\x00")

func deploymentAlamedaDatahubdmYamlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentAlamedaDatahubdmYaml,
		"Deployment/alameda-datahubDM.yaml",
	)
}

func deploymentAlamedaDatahubdmYaml() (*asset, error) {
	bytes, err := deploymentAlamedaDatahubdmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Deployment/alameda-datahubDM.yaml", size: 1249, mode: os.FileMode(420), modTime: time.Unix(1553755533, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentAlamedaEvictionerdmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xcd\x6e\x9b\x40\x10\xbe\xf3\x14\xa3\x5c\x72\x32\x21\x6a\x9d\xaa\x7b\x23\x05\xa9\x96\x1c\xd7\x4a\xd2\x5c\xad\xc9\x32\x94\x55\xf7\x2f\xbb\x03\x11\x6f\x5f\x61\x9b\x14\x14\x3b\xed\x9e\x60\x76\xbf\x9f\xf9\x76\x07\xbd\x7a\xa2\x10\x95\xb3\x02\xd0\xfb\x78\xd5\x5d\x27\xbf\x95\xad\x04\x14\xe4\xb5\xeb\x0d\x59\x4e\x0c\x31\x56\xc8\x28\x12\x00\x8b\x86\x04\xa0\x46\x43\x15\x2e\xa8\x53\x92\x95\xb3\x14\x8e\x5b\xd1\xa3\x24\x01\x35\x55\x14\x90\x5d\x40\x95\x00\x68\x7c\x26\x3d\x80\x61\xd0\x78\x43\xef\x0b\xd2\x19\xef\x2c\x59\x3e\x43\x8a\xd6\x3a\xc6\xe1\x37\x1e\x18\x2a\x8a\x32\x28\xcf\x7b\xcb\x05\xd5\xca\x52\x84\xc6\xbd\x02\x3b\xa8\xf6\x9e\x81\x1b\x3a\x4d\x06\xc0\x64\xbc\x46\xa6\x14\xb5\x6f\x30\x75\x9e\x6c\x6c\x54\xcd\xa9\x72\x57\xaf\xa8\x78\x51\xbb\xb0\x08\x84\x55\x2f\xe0\x92\x43\x4b\x97\x49\xf4\x24\x07\xe9\x40\x5e\x2b\x89\x51\xc0\x75\x02\x10\x49\x93\x64\x17\x0e\xa6\x0c\xb2\x6c\xd6\x43\x9b\x47\x97\xf3\x4e\xe7\x2e\x46\x0f\x47\xe8\x24\xdc\x61\x7d\x10\xf0\xb0\xf4\x4c\xe4\x23\x19\x80\xd1\xf9\x21\x67\xcb\xa8\x2c\x85\x37\xec\xe2\x5f\x52\x00\xca\xe0\x2f\x12\xf0\xd2\x62\x3f\x04\xe4\x83\xf3\x0d\x71\x64\x17\xae\xde\xa3\x16\xa1\x21\x2d\xba\x2c\xfd\x94\xde\xcc\x19\xb6\xad\xd6\x5b\xa7\x95\xec\x05\xac\xea\x8d\xe3\x6d\xa0\x38\x3c\xac\xf1\x54\xa0\xe8\xda\x20\x69\xd2\x17\x80\x56\x46\xf1\xac\x02\x20\x7d\x2b\xe0\x26\x33\xb3\xa2\x21\xe3\x42\x2f\xe0\x6b\x76\xa7\x26\x1b\x81\x5e\x5a\x8a\x27\x19\x3e\x2f\x4f\x33\x7c\x59\x4e\x18\xc8\x76\x7f\xa1\x63\x58\xf9\x3a\xbf\x2b\x8b\x7c\x57\x3e\xad\xbe\x3d\xae\x7e\x6c\xca\xfb\x5d\x91\x3f\xe6\xdf\x7f\xde\xee\xf2\xa2\xb8\x2f\x1f\x1e\x26\xc4\x1d\xea\x96\x04\x5c\x8c\x59\x0d\xd7\xdc\xb4\xcf\xe9\x64\x3a\xd2\xd8\x49\xb1\xcc\xb2\x65\x76\xf1\x3f\x5a\xe3\xe7\xae\xdc\xe4\xb7\xeb\xf2\x84\x56\x8d\x3a\xd2\xc8\x15\x29\x74\x4a\x52\x2e\xa5\x6b\xcf\x4e\xd8\xfb\x83\x9b\x33\xef\xe2\x4f\x00\x00\x00\xff\xff\x17\x5a\xdf\xbc\x2d\x04\x00\x00")

func deploymentAlamedaEvictionerdmYamlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentAlamedaEvictionerdmYaml,
		"Deployment/alameda-evictionerDM.yaml",
	)
}

func deploymentAlamedaEvictionerdmYaml() (*asset, error) {
	bytes, err := deploymentAlamedaEvictionerdmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Deployment/alameda-evictionerDM.yaml", size: 1069, mode: os.FileMode(420), modTime: time.Unix(1553755533, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentAlamedaGrafanadmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xbd\x8e\xdb\x30\x0c\xde\xfd\x14\xdc\x6e\x72\x9c\xdc\x5d\x17\xad\xbd\xa5\x40\x53\x78\x28\xba\xf3\x64\x3a\x16\x2a\x89\x2a\x45\xe7\x10\x14\x7d\xf7\x42\x8e\x93\xb3\xef\xaf\xd5\x22\x80\xe4\xf7\x43\x8a\xc2\xe4\x7e\x90\x64\xc7\xd1\x00\xa6\x94\x9b\xe3\xae\xfa\xe9\x62\x67\xe0\x81\x92\xe7\x53\xa0\xa8\x55\x20\xc5\x0e\x15\x4d\x05\x10\x31\x90\x01\xf4\x18\xa8\xc3\xfa\x20\xd8\x63\xc4\x39\x9e\x13\x5a\x32\xd0\x53\x47\x82\xca\x82\xae\x02\xf0\xf8\x48\xbe\x20\xa1\x08\x5c\xa1\x53\xc0\x72\x48\x1c\x29\xea\x5b\x8c\x18\x23\x2b\xaa\xe3\x98\xcf\xf0\x8e\xb2\x15\x97\x74\x32\xfb\x40\xbd\x8b\x94\x61\xe0\x27\x50\x86\x6e\x72\x0b\x3a\x50\x51\xf1\xce\x4e\x40\x78\x66\x03\x50\x0a\xc9\xa3\xd2\x06\x7d\x1a\x70\xc3\x89\x62\x1e\x5c\xaf\x1b\xc7\xcd\x13\x3a\xad\x7b\x96\x5a\x08\xbb\x93\x81\x1b\x95\x91\x6e\xaa\x9c\xc8\x16\x6d\xa1\x89\x32\x1b\xd8\x55\x00\x99\x3c\x59\x65\x39\xbb\x0a\xa8\x76\xf8\x5a\x9a\x9c\x6d\xbe\xec\x74\xd1\xd2\xc5\xc2\x8c\x5c\x8c\xb5\x1c\xff\x7f\x24\x00\x17\x5b\xe7\x11\x46\x45\x17\x49\xae\xc0\x7a\x7e\xa3\x25\xa2\x1c\x17\xf0\xf0\x1c\x6e\xe6\xdb\x7c\xda\xdc\x6f\xee\xd6\x45\xed\xe8\x7d\xcb\xde\xd9\x93\x81\x2f\xfd\x37\xd6\x56\x28\x97\x45\xb8\x54\x25\x16\x5d\x18\x2d\x9a\x57\x1f\x2d\x8b\x1a\xb8\xdb\x6e\xb7\x8b\xfc\x65\x6f\x06\xd5\xb4\x0a\x27\x61\x65\xcb\xde\xc0\xf7\xcf\xed\x35\x23\x94\x79\x14\x4b\x2b\x0d\xef\x82\x5b\xab\x02\xd8\x34\x1a\xb8\xdd\x6e\xc3\x2a\x1a\x28\xb0\x9c\xa6\xc4\xde\x2d\x32\x42\xbf\x46\xca\x6f\x72\xec\xde\xe3\xd8\xad\x38\x8e\xec\xc7\x40\x7b\x1e\xe3\xcb\xfe\x43\x89\xb5\xa8\x83\x81\xe6\x88\xd2\x78\xf7\xd8\xbc\x7c\x81\xe7\x39\xcc\x99\x3a\x97\x5f\x72\xa0\x55\x45\x1e\x1f\xcf\x3c\xaf\xe1\x6b\x19\x52\x7b\x91\x68\x92\xf0\xd1\x95\x6f\xec\xe2\xa1\x29\x4b\x35\x0f\xf0\x03\xed\xd7\x55\xe7\xee\x16\x8d\xd5\xff\xb4\x4b\x21\xe9\xe9\xc1\x89\x81\xdf\x7f\x16\x30\xcb\xb1\x77\x87\x3d\xa6\xf5\xa8\x3b\xea\x71\xf4\xba\xe7\x8e\x0c\xdc\xdf\xbe\xb5\x21\xef\xbb\xfb\xb0\x06\xfe\x06\x00\x00\xff\xff\xe0\x03\x9c\x91\xc9\x04\x00\x00")

func deploymentAlamedaGrafanadmYamlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentAlamedaGrafanadmYaml,
		"Deployment/alameda-grafanaDM.yaml",
	)
}

func deploymentAlamedaGrafanadmYaml() (*asset, error) {
	bytes, err := deploymentAlamedaGrafanadmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Deployment/alameda-grafanaDM.yaml", size: 1225, mode: os.FileMode(420), modTime: time.Unix(1553755533, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentAlamedaInfluxdbdmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\xc1\x6f\xe2\x3a\x10\xc6\xef\xfc\x15\xa3\xbe\x43\x4f\x40\x39\x3d\xc9\x37\x5a\xd2\xd7\xe8\xb5\x34\x82\xd0\xdd\x3d\xa1\x21\x99\x34\x56\x1d\xdb\xb2\x27\xb4\xd1\x6a\xff\xf7\x95\x03\xb4\x81\x42\x5b\xed\xfa\x80\x90\xed\xef\xf7\x7d\x13\x7b\x8c\x56\x3e\x90\xf3\xd2\x68\x01\x68\xad\x1f\xae\x47\xbd\x27\xa9\x73\x01\x13\xb2\xca\x34\x15\x69\xee\x55\xc4\x98\x23\xa3\xe8\x01\x68\xac\x48\x00\x2a\xac\x28\xc7\xbe\xd4\x85\xaa\x5f\xf2\xd5\x76\xc1\x5b\xcc\x48\x40\x41\x39\x39\x64\xe3\x50\xf6\x00\x14\xae\x48\x05\x29\x04\x87\x57\x6d\x3b\x91\x99\xca\x1a\x4d\x9a\x8f\x22\x51\x6b\xc3\xc8\xd2\x68\xbf\xd1\xe7\xe4\x33\x27\x2d\xb7\x71\x27\x54\x48\x4d\x1e\x4a\xf3\x0c\x6c\x20\x6f\xf3\x02\x97\x14\x6c\x94\xcc\x5a\x21\x74\x70\x00\x4c\x95\x55\xc8\x34\x40\x65\x4b\x1c\x18\x4b\xda\x97\xb2\xe0\x81\x34\xc3\x67\x94\xdc\x2f\x8c\xeb\x3b\xc2\xbc\x11\x70\xce\xae\xa6\xf3\x9e\xb7\x94\x05\x73\x47\x2d\xd3\x0b\x18\xf5\x00\x3c\x29\xca\xd8\xb8\x4d\xac\x0a\x39\x2b\x6f\x43\x99\xdb\x9c\x87\xb5\x76\x8b\xda\x65\xd8\x4a\x3b\x9f\x36\x0c\xf5\x45\x0a\xc0\x2e\x58\x18\xff\x80\xa7\xac\x76\x92\x9b\x2b\xa3\x99\x5e\xf8\x6d\x01\xc0\xd5\x7a\xec\x17\x9e\x9c\x80\xd1\xc5\xc5\xc5\x76\x25\x33\x9a\x51\x6a\x72\xaf\x66\xfd\xed\xd9\xee\xb9\x84\x21\x2b\x7c\xec\xcc\x8b\xd1\xe0\xdf\x3e\x2a\x2b\x35\xed\x6f\x49\x6a\xa5\x12\xa3\x64\xd6\x08\x88\x8b\xa9\xe1\xc4\x91\x0f\xf7\x67\xb7\x8b\xf4\xfa\xad\xb2\x9d\x5d\x3c\xbd\xbe\x5d\x7c\x9f\x5c\x2e\x67\x51\x72\x3f\x4b\xe3\xe9\x7f\xcb\x49\x3c\x1f\x5f\xde\x46\x93\xd7\xbd\x00\x6b\x54\x35\x09\x38\x0b\x87\x72\x76\x9a\x71\x93\xa6\x49\xfb\x33\x5f\x46\xd3\xbf\x67\x5c\x45\xb3\x34\xbe\x8e\xaf\xc6\x69\x74\x84\x33\x24\xce\x86\xac\xfc\xd0\x3a\xb9\x46\xa6\xf0\x7f\x90\x39\xfe\x1a\x3b\x99\xc5\x0f\xe3\x34\x5a\xfe\x1f\xfd\xf8\x2a\xfb\x89\x9a\xcf\xd8\xe3\x45\x7a\xf3\xe7\xa5\x8f\x27\x77\xf1\x74\xb9\x98\x47\xb3\x23\x5a\xcc\x2b\xa9\x3f\x15\x27\xe3\xf9\xfc\xdb\xfd\xec\x98\x79\x0b\xb0\xe8\xfd\x07\x90\x13\xde\xb5\x27\xf7\x89\xea\x23\xe7\x20\xdf\x37\x5e\x1b\x55\x57\x74\x67\x6a\xcd\xbe\x7b\x27\xab\x30\x93\x20\x97\x02\x0e\x8f\xa0\xc3\xdd\x7f\x04\x43\xff\x96\xf5\xaa\xcf\xca\x77\xf6\x84\x67\xe4\x5e\xab\x46\x40\x81\xca\xd3\x09\x8f\x35\xba\xa1\x92\xab\xe1\xbb\xa6\x83\x83\x6e\xec\xfb\xf0\x9e\x3e\x76\x53\xf8\x7a\xb5\xa1\x1c\x88\x37\xb5\x9d\xec\xeb\x77\x24\xaa\x2c\x37\x13\xe9\x04\xfc\xfc\x75\xa0\xf9\xa8\x44\x4f\x99\x23\x16\xdd\x40\xed\xcc\xf4\x94\xf2\x77\x00\x00\x00\xff\xff\xb2\x72\xa2\xed\x6c\x06\x00\x00")

func deploymentAlamedaInfluxdbdmYamlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentAlamedaInfluxdbdmYaml,
		"Deployment/alameda-influxdbDM.yaml",
	)
}

func deploymentAlamedaInfluxdbdmYaml() (*asset, error) {
	bytes, err := deploymentAlamedaInfluxdbdmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Deployment/alameda-influxdbDM.yaml", size: 1644, mode: os.FileMode(420), modTime: time.Unix(1553755533, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentAlamedaOperatordmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x93\x4f\x6f\xdb\x30\x0c\xc5\xef\xfe\x14\x44\x2f\x3d\xc5\x71\xba\x75\x07\xdd\x3c\x38\xc0\x06\xf4\x4f\x90\x76\xbb\x06\xac\xcc\xcc\xc2\x24\x51\x95\x68\x17\xf9\xf6\x83\xf2\xa7\xb3\xb7\xa4\x3e\x52\xfc\x3d\x3e\x3e\x59\x18\xcc\x4f\x8a\xc9\xb0\x57\x80\x21\xa4\xf9\xb0\x28\x7e\x1b\xdf\x2a\x68\x28\x58\xde\x39\xf2\x52\x38\x12\x6c\x51\x50\x15\x00\x1e\x1d\x29\x40\x8b\x8e\x5a\x9c\x71\xa0\x88\xc2\xf1\x78\x90\x02\x6a\x52\xb0\xa5\xf6\x50\x46\x53\x00\x58\x7c\x21\x9b\x51\xc8\x13\xde\xd9\x7d\x41\xb3\x0b\xec\xc9\xcb\x59\x49\xf4\x9e\x05\xc5\xb0\x4f\x07\xbe\xa5\xa4\xa3\x09\xb2\xb7\xdb\xd0\xd6\x78\x4a\xd0\xf1\x1b\x08\x43\xbb\xf7\x0b\xd2\x51\x1e\x63\x8d\xde\x83\xe7\x64\x01\x84\x5c\xb0\x28\x54\xa2\x0d\x1d\x96\x1c\xc8\xa7\xce\x6c\xa5\x34\x3c\x7f\x43\x23\xb3\x2d\xc7\x59\x24\x6c\x77\x0a\xae\x25\xf6\x74\x5d\xa4\x40\x3a\x9b\x88\xb4\xd7\x4e\x0a\x16\x05\x40\x22\x4b\x5a\x38\x1e\xec\x39\x14\xdd\xdd\xe5\x75\x8f\x7e\xa7\x1b\x8f\x3d\x9c\x1c\x1c\xc1\x51\xc0\xf9\xbb\x18\x72\xfe\xec\x64\xc0\xe5\x11\x00\x27\xcf\x87\xa4\xbd\xa0\xf1\x14\xdf\xc9\xd9\xc7\x63\x00\x8c\xc3\x5f\xa4\xe0\xb5\xc7\x5d\x0e\x26\x44\x0e\x1d\x49\x12\x8e\xf3\x7f\x99\x59\xec\xc8\xaa\xa1\x2a\x3f\x95\x5f\xa6\xfc\xaa\xb7\x76\xc5\xd6\xe8\x9d\x82\xef\xdb\x07\x96\x55\xa4\x94\x7f\xaa\x53\x57\xa4\xc4\x7d\xd4\x34\xda\x08\xc0\x1a\x67\x64\x52\x01\xd0\xa1\x57\x70\x53\xb9\x49\xd1\x91\xe3\xb8\x53\xf0\xb9\xba\x37\xa3\x83\x48\xaf\x3d\xa5\xb3\x0a\x8b\x0b\x0a\x37\x63\x05\xf2\xc3\x5f\xf4\x14\x54\x7d\x57\xdf\x2f\x9b\x7a\xf3\xb8\x5a\xae\xeb\xe7\xc7\xf5\xa6\xa9\x9f\xeb\x6f\x3f\xbe\x6e\xea\xa6\x59\x2f\x9f\x9e\x46\xb2\x03\xda\x9e\x14\x5c\x9d\x72\xca\x97\xdb\xf5\x2f\xe5\xe8\x65\x94\x69\xd0\xea\xb6\xaa\x6e\xab\xab\x23\x98\x28\x0e\x46\x53\xad\x35\xf7\x17\x5e\xc4\xff\x6d\x0f\x67\xef\x30\xf7\xfd\x09\x00\x00\xff\xff\x84\x92\x5d\x08\xdb\x03\x00\x00")

func deploymentAlamedaOperatordmYamlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentAlamedaOperatordmYaml,
		"Deployment/alameda-operatorDM.yaml",
	)
}

func deploymentAlamedaOperatordmYaml() (*asset, error) {
	bytes, err := deploymentAlamedaOperatordmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Deployment/alameda-operatorDM.yaml", size: 987, mode: os.FileMode(420), modTime: time.Unix(1553755533, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _persistentvolumeclaimMyAlamedagrafanapvcYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\x3b\x6a\xc4\x30\x14\x45\x7b\xad\xe2\x6d\xc0\x86\xa4\x54\x9b\x22\x55\x48\x48\xe1\xa9\x2f\xd2\xb5\x11\x63\x7d\xe6\x3d\xd9\x30\xbb\x1f\x04\x9e\xf2\xdc\xcf\x41\x4b\x0b\xd5\x52\x2d\x5e\xce\x0f\x77\x4f\x25\x7a\xf9\x1b\x89\x75\x96\xbe\xd4\xfd\xc8\xfc\xda\x91\xb2\xcb\xec\x88\xe8\xf0\x4e\xa4\x20\xd3\x4b\x7e\x4e\xd8\x91\x19\x31\x6f\x8a\x15\x05\x73\x3b\xc3\x55\x5b\x43\xa0\x97\x95\x91\x8a\x5e\x15\xc9\x59\x63\x18\x6f\x84\x40\xb3\x9f\x1a\x69\x03\x45\x26\xf9\x27\xe2\x4d\x53\xe7\x6f\x09\x74\x22\x4a\xab\x87\x86\xf7\x40\xf9\x38\x68\xfd\x22\x11\x1b\xc2\x8d\x5e\x3e\xbf\x93\xbc\x02\x00\x00\xff\xff\x05\x22\x1e\x79\xc4\x00\x00\x00")

func persistentvolumeclaimMyAlamedagrafanapvcYamlBytes() ([]byte, error) {
	return bindataRead(
		_persistentvolumeclaimMyAlamedagrafanapvcYaml,
		"PersistentVolumeClaim/my-alamedagrafanaPVC.yaml",
	)
}

func persistentvolumeclaimMyAlamedagrafanapvcYaml() (*asset, error) {
	bytes, err := persistentvolumeclaimMyAlamedagrafanapvcYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "PersistentVolumeClaim/my-alamedagrafanaPVC.yaml", size: 196, mode: os.FileMode(420), modTime: time.Unix(1553654452, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _persistentvolumeclaimMyAlamedainfluxdbpvcYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\xbb\x6e\xc3\x30\x0c\x45\x77\x7d\x05\x37\x4f\x36\xea\x55\x6b\x87\x4e\x45\x8b\x0e\xee\xcc\x48\xd7\x01\x11\xbd\x22\x4a\x46\xf2\xf7\x81\x00\x67\x3c\xf7\x71\xb8\xc8\x86\xaa\x92\x93\xa5\x63\x35\x37\x49\xde\xd2\xef\x48\xb4\x21\xb5\x2d\x87\x1e\xf1\x19\x58\xa2\x89\x68\xec\xb9\xb1\x35\x44\x89\x23\x2c\xc5\xe7\xcc\x81\x23\x3c\x2f\x92\xf6\xd0\x1f\xfe\xb2\x94\xc3\x9d\xbd\x16\x76\xb0\xb4\xc3\xa3\x72\xcb\x95\xc5\x68\x81\x1b\x77\x76\x0e\xaa\xdf\xd9\x43\x07\x12\xcd\xf4\x07\xf6\xff\x55\x1a\x7e\x92\x83\x21\xaa\xd0\xdc\xab\x7b\x0f\x2a\xee\x1d\xda\x4e\x22\xd2\x21\xbc\xc2\xd2\xb4\x7e\x7c\xc9\xf4\x0a\x00\x00\xff\xff\x1f\xa2\x03\x61\xc7\x00\x00\x00")

func persistentvolumeclaimMyAlamedainfluxdbpvcYamlBytes() ([]byte, error) {
	return bindataRead(
		_persistentvolumeclaimMyAlamedainfluxdbpvcYaml,
		"PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml",
	)
}

func persistentvolumeclaimMyAlamedainfluxdbpvcYaml() (*asset, error) {
	bytes, err := persistentvolumeclaimMyAlamedainfluxdbpvcYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml", size: 199, mode: os.FileMode(420), modTime: time.Unix(1553504716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _serviceAdmissionControllersvYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x41\x4e\xc4\x30\x0c\x45\xf7\x39\x85\x2f\x90\x52\xc4\x2c\x50\x4e\x81\x84\xc4\xde\xa4\x7f\x66\x22\x52\x3b\xb2\xad\x39\x3f\x6a\xe8\x12\xc4\x2e\xf1\xff\x7a\xcf\xe6\xd1\x3e\x60\xde\x54\x0a\x3d\x9e\xd3\x57\x93\xad\xd0\x3b\xec\xd1\x2a\xd2\x8e\xe0\x8d\x83\x4b\x22\x62\x11\x0d\x8e\xa6\xe2\xc7\x97\xc8\x7f\x4a\x0b\xf7\x71\xe7\x45\x07\xc4\xef\xed\x1a\x4b\xd3\xa7\x19\xc9\x2d\x57\x58\x64\x47\x35\x44\x16\xde\x51\x88\xb7\xbd\xf9\x61\xcb\x55\x25\x4c\x7b\x87\xe5\xe8\x9e\x88\x3a\x7f\xa2\x9f\x6c\x1e\xe3\xf7\x6e\x22\xfa\x1b\x74\x86\x3e\xb8\xa2\xd0\x15\x1b\x8c\x43\x8d\x5b\xf2\x81\x7a\x90\x87\x5a\x4c\x45\x9e\xcf\x42\x97\xcb\xcb\x14\x06\xdb\x0d\xf1\x36\x67\xaf\xeb\xba\xa6\xe3\xbe\x8e\x1a\x6a\xff\x6c\xf4\x1d\x00\x00\xff\xff\xd7\x20\x8b\xad\x41\x01\x00\x00")

func serviceAdmissionControllersvYamlBytes() ([]byte, error) {
	return bindataRead(
		_serviceAdmissionControllersvYaml,
		"Service/admission-controllerSV.yaml",
	)
}

func serviceAdmissionControllersvYaml() (*asset, error) {
	bytes, err := serviceAdmissionControllersvYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Service/admission-controllerSV.yaml", size: 321, mode: os.FileMode(420), modTime: time.Unix(1553504716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _serviceAlamedaDatahubsvYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x31\x0e\xc3\x20\x14\x43\x77\x4e\xe1\x0b\x44\x4a\x87\x2c\x5c\xa3\x52\x77\x07\xdc\x16\x95\x04\xf4\xa1\x39\x7f\x45\xd4\x35\x9b\x65\x5b\xcf\x66\x4d\x0f\x59\x4b\x65\xf7\x38\x6e\xee\x93\xf6\xe8\x71\x97\x1d\x29\xc8\x6d\xea\x8c\xec\xf4\x0e\xc8\x5c\x95\xdb\x50\x00\x6b\xf5\x60\xe6\xa6\xc8\x69\x14\xde\xdf\xd5\x01\x3b\x37\x5d\xf9\xad\x32\xc8\xe3\xa9\x28\x63\x2f\xc6\xe4\x5a\x55\x18\xbc\x5a\xac\x9f\xe0\xe9\x4f\x78\x59\x0d\xe7\xce\x48\x3c\x96\x79\x5e\x66\x07\x34\x65\x85\x5e\xec\xfa\xc3\x2f\x00\x00\xff\xff\x17\x03\xde\x3c\xcd\x00\x00\x00")

func serviceAlamedaDatahubsvYamlBytes() ([]byte, error) {
	return bindataRead(
		_serviceAlamedaDatahubsvYaml,
		"Service/alameda-datahubSV.yaml",
	)
}

func serviceAlamedaDatahubsvYaml() (*asset, error) {
	bytes, err := serviceAlamedaDatahubsvYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Service/alameda-datahubSV.yaml", size: 205, mode: os.FileMode(420), modTime: time.Unix(1553504716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _serviceAlamedaGrafanasvYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x31\xaa\xc3\x30\x10\x44\x7b\x9d\x62\x2f\x60\xf0\xe7\x77\x3a\x45\x20\x90\x7e\x22\x8d\x8d\x88\x2c\x2d\xab\xc5\xe7\x0f\x56\x95\xc6\xdd\xe3\x15\x6f\x06\x5a\x5e\xb4\x51\x7a\x8b\x72\xfe\x85\x4f\x69\x39\xca\x93\x76\x96\xc4\x70\xd0\x91\xe1\x88\x41\xa4\xe2\xcd\x3a\x2e\x12\x81\x6a\x14\x54\x1c\xcc\x58\x76\xc3\x86\x86\x20\xd2\x70\xf0\xce\x0f\x45\x62\x94\x8d\x99\x06\xef\x86\x12\x86\x32\x5d\x3d\xed\xe6\x33\xbc\x4c\x8c\xf2\xbf\xae\xeb\xdc\x71\xd8\x4e\x7f\xfc\xca\xc1\xca\xe4\xdd\xee\x8f\xc8\x37\x00\x00\xff\xff\x1d\x9d\x3e\xc2\xd3\x00\x00\x00")

func serviceAlamedaGrafanasvYamlBytes() ([]byte, error) {
	return bindataRead(
		_serviceAlamedaGrafanasvYaml,
		"Service/alameda-grafanaSV.yaml",
	)
}

func serviceAlamedaGrafanasvYaml() (*asset, error) {
	bytes, err := serviceAlamedaGrafanasvYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Service/alameda-grafanaSV.yaml", size: 211, mode: os.FileMode(420), modTime: time.Unix(1553504716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _serviceAlamedaInfluxdbsvYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x4d\x4e\xc4\x30\x0c\x85\xf7\x39\x85\x2f\x90\x02\x1b\x34\xca\x29\x90\x90\xd8\xbf\x26\xaf\xd3\x88\x34\x89\x62\x4f\xc5\xf1\x51\x0b\x12\x3f\x8b\xd9\xd9\x7e\x9f\x3f\x1b\x3d\xbf\x71\x68\x6e\x35\xc8\xfe\xe4\xde\x73\x4d\x41\x5e\x39\xf6\x1c\xe9\x36\x1a\x12\x0c\xc1\x89\xa0\xd6\x66\xb0\xdc\xaa\x1e\xad\x88\x7e\x41\x13\x4a\x5f\x31\xb5\xce\xaa\x6b\x5e\x6c\xca\xed\xe1\x8c\xea\xd5\x47\x0e\xf3\xca\x38\x68\xbe\x62\x63\x10\x14\x6c\x4c\xf0\x87\x75\xbd\xcd\xde\x8a\x3a\x91\x82\x99\xe5\x5b\x8b\xde\x7f\xb0\x5c\x97\x72\xfb\x48\xb3\x13\xf9\xbb\xff\x2f\xd0\x8e\xc8\x20\x0b\x13\x07\xac\x0d\x64\xa7\x9d\xf1\x30\xf6\x36\xec\x54\xfb\xb3\x0c\x72\x79\xbc\x3c\x9f\x97\x0c\xe3\x4a\x7b\xf9\x3d\x54\x16\x46\x6b\xe3\xce\x2b\x9f\x01\x00\x00\xff\xff\x72\x16\x4d\x33\x31\x01\x00\x00")

func serviceAlamedaInfluxdbsvYamlBytes() ([]byte, error) {
	return bindataRead(
		_serviceAlamedaInfluxdbsvYaml,
		"Service/alameda-influxdbSV.yaml",
	)
}

func serviceAlamedaInfluxdbsvYaml() (*asset, error) {
	bytes, err := serviceAlamedaInfluxdbsvYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Service/alameda-influxdbSV.yaml", size: 305, mode: os.FileMode(420), modTime: time.Unix(1553504716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ConfigMap/grafana-datasources.yaml": configmapGrafanaDatasourcesYaml,
	"Deployment/admission-controllerDM.yaml": deploymentAdmissionControllerdmYaml,
	"Deployment/alameda-aiDM.yaml": deploymentAlamedaAidmYaml,
	"Deployment/alameda-datahubDM.yaml": deploymentAlamedaDatahubdmYaml,
	"Deployment/alameda-evictionerDM.yaml": deploymentAlamedaEvictionerdmYaml,
	"Deployment/alameda-grafanaDM.yaml": deploymentAlamedaGrafanadmYaml,
	"Deployment/alameda-influxdbDM.yaml": deploymentAlamedaInfluxdbdmYaml,
	"Deployment/alameda-operatorDM.yaml": deploymentAlamedaOperatordmYaml,
	"PersistentVolumeClaim/my-alamedagrafanaPVC.yaml": persistentvolumeclaimMyAlamedagrafanapvcYaml,
	"PersistentVolumeClaim/my-alamedainfluxdbPVC.yaml": persistentvolumeclaimMyAlamedainfluxdbpvcYaml,
	"Service/admission-controllerSV.yaml": serviceAdmissionControllersvYaml,
	"Service/alameda-datahubSV.yaml": serviceAlamedaDatahubsvYaml,
	"Service/alameda-grafanaSV.yaml": serviceAlamedaGrafanasvYaml,
	"Service/alameda-influxdbSV.yaml": serviceAlamedaInfluxdbsvYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"ConfigMap": &bintree{nil, map[string]*bintree{
		"grafana-datasources.yaml": &bintree{configmapGrafanaDatasourcesYaml, map[string]*bintree{}},
	}},
	"Deployment": &bintree{nil, map[string]*bintree{
		"admission-controllerDM.yaml": &bintree{deploymentAdmissionControllerdmYaml, map[string]*bintree{}},
		"alameda-aiDM.yaml": &bintree{deploymentAlamedaAidmYaml, map[string]*bintree{}},
		"alameda-datahubDM.yaml": &bintree{deploymentAlamedaDatahubdmYaml, map[string]*bintree{}},
		"alameda-evictionerDM.yaml": &bintree{deploymentAlamedaEvictionerdmYaml, map[string]*bintree{}},
		"alameda-grafanaDM.yaml": &bintree{deploymentAlamedaGrafanadmYaml, map[string]*bintree{}},
		"alameda-influxdbDM.yaml": &bintree{deploymentAlamedaInfluxdbdmYaml, map[string]*bintree{}},
		"alameda-operatorDM.yaml": &bintree{deploymentAlamedaOperatordmYaml, map[string]*bintree{}},
	}},
	"PersistentVolumeClaim": &bintree{nil, map[string]*bintree{
		"my-alamedagrafanaPVC.yaml": &bintree{persistentvolumeclaimMyAlamedagrafanapvcYaml, map[string]*bintree{}},
		"my-alamedainfluxdbPVC.yaml": &bintree{persistentvolumeclaimMyAlamedainfluxdbpvcYaml, map[string]*bintree{}},
	}},
	"Service": &bintree{nil, map[string]*bintree{
		"admission-controllerSV.yaml": &bintree{serviceAdmissionControllersvYaml, map[string]*bintree{}},
		"alameda-datahubSV.yaml": &bintree{serviceAlamedaDatahubsvYaml, map[string]*bintree{}},
		"alameda-grafanaSV.yaml": &bintree{serviceAlamedaGrafanasvYaml, map[string]*bintree{}},
		"alameda-influxdbSV.yaml": &bintree{serviceAlamedaInfluxdbsvYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

